#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};

class LRUCache : public Cache{

    public:
        LRUCache(int initialCapacity){
            cp = initialCapacity;
        };

        void set(int k, int val){
            
            if(head->key < 0){
                head = new Node(k, val);
                mp.insert(pair<int,Node*>(k, head));
                head->next = head;
                head->prev = head;
                tail = head;
                
            } else {
                 if( mp.count(k) > 0){
                    //cout << "update " << k << endl;
                    update(mp[k],val);
                } else {
                    insert(k, val);
                    delete_last();
                }
                
            }
        };

        int get(int key){
           
            if( mp.count(key) > 0){
                if( mp[key]->value > -1){
                    Node* found = mp[key];
                    if(head->key != found->key) make_first(found);
                    return found->value;
                } else {
                    return -1;
                }
            } else {
                return -1;
            }; 

        };

        void make_first(Node* new_first){
            Node* prev = new_first->prev;
            Node* next = new_first->next;
         
            prev->next = next;
            next->prev = prev;
            head->prev = new_first;
            new_first->next = head;
            head = new_first;

        };

        void insert(int k, int val){
            Node* newHead = new Node( k, val);
            newHead->prev = newHead;
            newHead->next = head;
            head = newHead;
            mp.insert(pair<int,Node*>(k, head));
        }

        void update(Node* newHead, int val){
            newHead->value = val;
            make_first(newHead);
        }

        void delete_last(){
            
            if(mp.size() > cp){
                Node* new_tail = tail->prev;
                int keyToErase = tail->key;
                mp.erase(keyToErase);
                tail = new_tail;
            }
        }
};

int main() {
   int n, capacity,i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == "get") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == "set") {
         int key, value;
         cin >> key >> value;
         l.set(key,value);
      }
   }
   return 0;
}
